# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Java Deploy

on:
  release:
    types: [created]

env:
  GITHUB_TOKEN: ${{ github.token }}
  WS: ${{ github.workspace }}

jobs:
  # the first job will deploy over GitHub Packages
  ghp-deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure GPG Key
      run: |
        mkdir -p ~/.gnupg/
        chmod 700 ~/.gnupg/
        echo $GPG_PRIVATE_KEY > ~/.gnupg/temp.key
        chmod 700 ~/.gnupg/temp.key
        gpg --batch --allow-secret-key-import --import ~/.gnupg/temp.key
        rm ~/.gnupg/temp.key
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

    - name: Set up GitHub Packages
      uses: actions/setup-java@v1
      with:
        java-version: '11'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: ${{ github.actor }} # env variable for username in deploy
        server-password: ${{ github.token }} # env variable for token in deploy
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }} # Value of the GPG private key to import
        gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }} # env variable for GPG private key passphrase
        settings-path: ${{ github.workspace }}/java

    - name: Publish GitHub Packages Apache Maven
      run: mvn -B -T $(nproc) deploy -s $WS/java/settings.xml -f $WS/java/pom.xml

    - name: Set up cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.m2/repository
          ${{ github.workspace }}/java
        key: ${{ runner.os }}-maven-${{ hashFiles('${{ github.workspace }}/java/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-${{ hashFiles('${{ github.workspace }}/java/pom.xml') }}
          ${{ runner.os }}-maven-
          ${{ runner.os }}-

  # the second job will deploy over Nexus
  oss-deploy:

    runs-on: ubuntu-latest

    steps:
    - name: Configure GPG Key
      run: |
        mkdir -p ~/.gnupg/
        chmod 700 ~/.gnupg/
        echo $GPG_PRIVATE_KEY > ~/.gnupg/temp.key
        chmod 700 ~/.gnupg/temp.key
        gpg --batch --allow-secret-key-import --import ~/.gnupg/temp.key
        rm ~/.gnupg/temp.key
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

    - name: Set up Apache Maven Central
      uses: actions/setup-java@v1
      with: # running setup-java again overwrites the settings.xml
        java-version: '11'
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: ${{ secrets.OSSRH_USERNAME }} # env variable for username in deploy
        server-password: ${{ secrets.OSSRH_PASSWORD }} # env variable for token in deploy
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }} # Value of the GPG private key to import
        gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }} # env variable for GPG private key passphrase
        settings-path: ${{ github.workspace }}/java

    - name: Publish to Apache Maven Central
      run: mvn -B -T $(nproc) deploy -s $WS/java/settings.xml -f $WS/java/pom.xml

  # the third job will release over GitHub
  release:

    runs-on: ubuntu-latest

    steps:
    - name: Build artifacts
      run: mvn -B -T $(nproc) package -f $WS/java/pom.xml

    - name: Get latest FLY Graph release
      id: release
      uses: bruceadams/get-release@v1.2.0

    - name: Upload JAR with dependencies as Release Asset
      id: upload-jar-with-deps-as-release-asset
      uses: actions/upload-release-asset@latest
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ./java/target/fly-graph-${{ github.event.release.tag_name }}-jar-with-dependencies-and-exclude-files.jar
        asset_name: fly-graph-${{ github.event.release.tag_name }}-jar-with-dependencies-and-exclude-files.jar
        asset_content_type: application/java-archive

    - name: Upload JAR as Release Asset
      id: upload-jar-release-asset
      uses: actions/upload-release-asset@latest
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ./java/target/fly-graph-${{ github.event.release.tag_name }}-lib.jar
        asset_name: fly-graph-${{ github.event.release.tag_name }}-lib.jar
        asset_content_type: application/java-archive

    - name: Upload Javadoc as Release Asset
      id: upload-javadoc-as-release-asset
      uses: actions/upload-release-asset@latest
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ./java/target/fly-graph-${{ github.event.release.tag_name }}-javadoc.jar
        asset_name: fly-graph-${{ github.event.release.tag_name }}-javadoc.jar
        asset_content_type: application/java-archive
